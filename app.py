#Importa as bibliotecas necess√°rias
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
from datetime import datetime, timedelta
import base64
import io
from PIL import Image

#pywin32==302

#Tit√∫lo
image = Image.open('logo1.jpg')
st.image(image, width=350)
st.header('**Sistema de Tratamento e An√°lise de Dados do Formistica**')
st.write("Esse sistema viza facilitar o processo de automatiza√ß√£o da transcri√ß√£o dos Cart√µes de Desvio para o sistema da Petrobras\n e tamb√©m faz uma an√°lise de dados nos cart√µes.")

################################### ETL ###################################
    
#Ler o arquivo do usu√°rio
st.markdown('---')
arq = st.file_uploader('Fa√ßa o upload do arquivo .xlsx:', type='.xls')

#Processa o arquivo
if arq:
    st.markdown('---')
    st.subheader('**Aqui est√° o arquivo tratado ü§ñ**')
    df = pd.read_excel(arq)
        
    #Filtra as colunas necess√°rias
    df = df.filter(items = ["Ger√™ncia/ Empresa do local da ocorr√™ncia:", "AddedUserDescription", "Data da ocorr√™ncia",
    "Hora da ocorr√™ncia","Unidade operacional/Sonda", "Classifica√ß√£o do desvio/ Categoria do evento:", "Desvio Sist√™mico", "Desvio Cr√≠tico",
    "Regras de Ouro Seguran√ßa - Petrobras", "O que aconteceu?", "A√ß√£o imediata", "Local da ocorr√™ncia"])

    #Adiciona 5 minutos na coluna "Hora da ocorr√™ncia e
    # salva na nova coluna "Fim da ocorr√™ncia"
    for h in df['Hora da ocorr√™ncia']:
        fim_ocorrencia = df['Hora da ocorr√™ncia'] + timedelta(minutes=5)
        df['Fim da ocorr√™ncia'] = fim_ocorrencia

    #Converte o formato timedelta64 para string
    df['Fim da ocorr√™ncia'] = df['Fim da ocorr√™ncia'].astype(str).map(lambda x: x[7:])

    #Sepera a data
    df['time'] = df['Data da ocorr√™ncia'].str.split().apply(pd.Series)
    df['datetime'] = pd.to_datetime(df['time'])
    df['Dia'] = df['datetime'].dt.day
    df['M√™s'] = df['datetime'].dt.month
    df['Ano'] = df['datetime'].dt.year
    df = df.drop(['time', 'datetime'], 1)

    #Separa a hora
    df['Hora_In√≠cio'] =  df['Hora da ocorr√™ncia'].str[:2]           
    df['Minuto_In√≠cio'] =  df['Hora da ocorr√™ncia'].str[3:5]
    df['Hora_Fim'] =  df['Fim da ocorr√™ncia'].str[:2]
    df['Minuto_Fim'] =  df['Fim da ocorr√™ncia'].str[3:5]


    #Organiza as colunas
    df = df[["Ger√™ncia/ Empresa do local da ocorr√™ncia:", "AddedUserDescription", "Data da ocorr√™ncia", "Hora da ocorr√™ncia", "Fim da ocorr√™ncia",
    "Unidade operacional/Sonda", "Classifica√ß√£o do desvio/ Categoria do evento:", "Desvio Sist√™mico", "Desvio Cr√≠tico", 
    "Regras de Ouro Seguran√ßa - Petrobras", "O que aconteceu?", "A√ß√£o imediata", "Local da ocorr√™ncia", "Dia", "M√™s", "Ano", "Hora_In√≠cio", 
    "Minuto_In√≠cio", "Hora_Fim", "Minuto_Fim"]]

    #Mostra o resultado 
    st.markdown('\n')
    st.dataframe(df)

    #Faz o download do arquivo
    st.markdown('---')
    st.markdown('**Fa√ßa o download:**')
    towrite = io.BytesIO()
    downloaded_file = df.to_excel(towrite, encoding='utf-8', index=False, header=True)
    towrite.seek(0)  # redefine o ponteiro
    b64 = base64.b64encode(towrite.read()).decode()  
    linko= f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="base_tratada.xlsx">Download da base tratada</a>'
    st.markdown(linko, unsafe_allow_html=True)

        

    ################################### INSIGHTS ###################################

    st.markdown('---')
    st.subheader("**E temos alguns insights üßê**")

    #Cria uma coluna 'Cart√£o' que recebe o valor 1 para cada elemento
    #na coluna 'AddedUserDescription'
    for n in df['AddedUserDescription']:
        df['Cart√£o'] = 1
        
    #Total de Cart√µes no M√™s
    st.markdown('\n')
    total_c = df['Cart√£o'].value_counts(dropna=False)
    st.write("Total de Cart√µes no M√™s:", total_c)

    #Cart√µes por T√©cnico
    st.markdown('---')
    cartao_tecnico = df[['AddedUserDescription', 'Cart√£o']]
    cartao_tecnico = cartao_tecnico.groupby('AddedUserDescription', dropna=False).count().reset_index()
    cartao_tecnico = cartao_tecnico.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='AddedUserDescription', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_tecnico,
                height=5,
                aspect=2)

    plt.axhline(14, 0, 1, color='crimson', **{'ls':'--'})
    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por T√©cnico')
    plt.show()
    st.pyplot(plt)
    plt.clf()

    st.markdown('\n')
    st.write("***Obs:***", "Ser√° que os t√©nicos que n√£o atingiram a meta foi devido terem embarcado perto do m√™s virar? ")


    #Cart√µes por Cliente
    st.markdown('---')
    cartao_cliente = df[['Ger√™ncia/ Empresa do local da ocorr√™ncia:', 'Cart√£o']]
    cartao_cliente = cartao_cliente.groupby('Ger√™ncia/ Empresa do local da ocorr√™ncia:', dropna=False).count().reset_index()
    cartao_cliente = cartao_cliente.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='Ger√™ncia/ Empresa do local da ocorr√™ncia:', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_cliente,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Cliente')
    plt.show()
    st.pyplot(plt)
    plt.clf()


    #Cart√µes por Sonda
    st.markdown('---')
    cartao_sonda = df[['Unidade operacional/Sonda', 'Cart√£o']]
    cartao_sonda = cartao_sonda.groupby('Unidade operacional/Sonda', dropna=False).count().reset_index()
    cartao_sonda = cartao_sonda.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='Unidade operacional/Sonda', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_sonda,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Sonda')
    plt.show()
    st.pyplot(plt)
    plt.clf()


    #Cart√µes por Local de Ocorr√™ncia
    st.markdown('---')
    cartao_local = df[['Local da ocorr√™ncia', 'Cart√£o']]
    cartao_local = cartao_local.groupby('Local da ocorr√™ncia', dropna=False).count().reset_index()
    cartao_local = cartao_local.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='Local da ocorr√™ncia', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_local,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Local de Ocorr√™ncia')
    plt.show()
    st.pyplot(plt)
    plt.clf()


    #Cart√µes por Categoria do Evento
    st.markdown('---')
    cartao_categoria = df[['Classifica√ß√£o do desvio/ Categoria do evento:', 'Cart√£o']]
    cartao_categoria = cartao_categoria.groupby('Classifica√ß√£o do desvio/ Categoria do evento:', dropna=False).count().reset_index()
    cartao_categoria = cartao_categoria.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='Classifica√ß√£o do desvio/ Categoria do evento:', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_categoria,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Categoria do Evento')
    plt.show()
    st.pyplot(plt)
    plt.clf()


    #Cart√µes por Regra de Ouro
    st.markdown('---')
    cartao_regra = df[['Regras de Ouro Seguran√ßa - Petrobras', 'Cart√£o']]
    cartao_regra = cartao_regra.groupby('Regras de Ouro Seguran√ßa - Petrobras', dropna=False).count().reset_index()
    cartao_regra = cartao_regra.sort_values(by='Cart√£o', ascending=False)

    sns.catplot(x='Regras de Ouro Seguran√ßa - Petrobras', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_regra,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 10, rotation=90)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Regras de ouro da Petrobras')
    plt.show()
    st.pyplot(plt)
    plt.clf()
        

    #Cart√µes por Desvio Sist√™mico
    st.markdown('---')
    cartao_ds = df[['Desvio Sist√™mico', 'Cart√£o']]
    cartao_ds = cartao_ds.groupby('Desvio Sist√™mico', dropna=False).count().reset_index()
    cartao_ds = cartao_ds.sort_values(by='Cart√£o',ascending=False)

    sns.catplot(x='Desvio Sist√™mico', y='Cart√£o', palette='mako',
                kind='bar',
                data=cartao_ds,
                height=5,
                aspect=2)

    plt.xticks(fontsize = 12, rotation=0)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Desvio Sist√™mico')
    plt.show()
    st.pyplot(plt)
    plt.clf()


    #Cart√µes por Desvio Cr√≠tico
    st.markdown('---')
    cartao_dc = df[['Desvio Cr√≠tico', 'Cart√£o']]
    cartao_dc = cartao_dc.groupby('Desvio Cr√≠tico', dropna=False).count().reset_index()
    cartao_dc = cartao_dc.sort_values(by='Cart√£o',ascending=False)

    sns.catplot(x='Desvio Cr√≠tico', y='Cart√£o', palette='mako',
            kind='bar',
            data=cartao_dc,
            height=5,
            aspect=2)

    plt.xticks(fontsize = 12, rotation=0)
    plt.style.use('ggplot')
    plt.title('Cart√µes por Desvio Cr√≠tico')
    plt.show()
    st.pyplot(plt)
    plt.clf()
    st.balloons()